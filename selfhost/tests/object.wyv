type Int:z:
    def +(i:Int):Int
    def -(i:Int):Int

type List:z:
    def sum(u:Unit):Int

type Empty:z:
    def sum(u:Unit):Int
subtype Empty extends List

type Node:z:
    def sum(u:Unit):Int
    val next:List
subtype Node extends List

val empty = new this:Empty:
    def sum(u:Unit):Int:
        0
    
val root = new this:Node:
    def sum(u:Unit):Int:
        this.next.sum(()) + 1
    val next = empty

val root2 = new this:Node:
    def sum(u:Unit):Int:
        this.next.sum(()) + 1
    val next = root

val root3 = new this:Node:
    def sum(u:Unit):Int:
        this.next.sum(()) + 1
    val next = root2

root3.sum(())
