type Int:
    def +(i:Int):Int
    def -(i:Int):Int

type Polygon:
    def perim(u:Unit):Int

type Triangle:
    val s1:Int
    val s2:Int
    val s3:Int
    def perim(u:Unit):Int
subtype Triangle extends Polygon

type Square:
    val s:Int
    def perim(u:Unit):Int
subtype Square extends Polygon

type A:
    def makeTri(a:Int,b:Int,c:Int):Triangle

val a = new this:A:
    def makeTri(a:Int,b:Int,c:Int):Triangle:
        new self:Triangle:
            val s1 = a
            val s2 = b
            val s3 = c
            def perim(u:Unit):Int:
                self.s1 + self.s2 + self.s3
    def makeSquare(a:Int):Square:
        new self:Square:
            val s = a
            def perim(u:Unit):Int:
                self.s + self.s + self.s + self.s

a.makeTri(1,3,3).perim(())
