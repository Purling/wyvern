module typecheck

import types
import bound
import error
import wyvern.option
import wyvern.collections.llist
type List = llist.LinkedList
type DeclType = types.DeclType
type Option = option.Option

def typecheck(e:bound.Statement):types.Type
    typecheckStmt(e,llist.Nil[DeclType]())

def typecheckStmt(e:bound.Statement, gamma:List[DeclType]):types.Type = match e:
    d:bound.DeclStatement => 
        val dc:types.DeclType = typecheckDecl(d.decl, gamma)
        val gammaPrime:List[DeclType] = llist.Cons[DeclType](dc, gamma)
        typecheckStmt(d.stmt, gammaPrime)
    e:bound.ExprStatement => 
        typecheckExpr(e.exp, gamma)

def typecheckDecl(e:bound.Decl, gamma:List[DeclType]):types.DeclType = match e:
    v:bound.Val => 
        val typ = typecheckExpr(v.exp, gamma)
        types.ValType(v.binding, typ)
    t:bound.TypeDecl =>
        types.TypeType(t.name, types.UnfoldedType(t.members))
    d:bound.Def =>
        val argdecls:List[DeclType] = d.args.map[types.ValType]((a:bound.Arg) => types.ValType(a.arg,a.argTyp))
        val argtypes:List[types.Type] = d.args.map[types.Type]((a:bound.Arg) => a.argTyp)
        val testType = typecheckStmt(d.body, argdecls.append(gamma))
        if (types.isSubtype(testType, d.retTyp, gamma))
            types.DefType(d.binding, argtypes, d.retTyp)
          else
            error.report("argument typ in def doesn't match expected:" + types.typeToString(testType) + ", " + types.typeToString(d.retTyp),error.unknownLocation)
    t:bound.TypeAlias =>     
        types.TypeType(t.name, t.typ)

def typecheckExpr(e:bound.Exp, gamma:List[DeclType]):types.Type = match e:
    v:bound.Var =>
        val pred = ((b:DeclType) => 
            val z = match b:
                va:types.ValType => 
                    if (types.equalBinding(v.binding,va.name)) { option.Some[types.ValType](va) } else { option.None[types.ValType]() }
                default => option.None[types.ValType]()
            z
        )
        types.findInDeclList[types.ValType](gamma, pred).typ

    c:bound.Call => //T-Invk
        val recType = typecheckExpr(c.receiver, gamma)
        val unfold:types.UnfoldedType = types.unfoldType(recType, gamma)
        val argtypes:List[types.Type] = c.args.map[types.Type](e => typecheckExpr(e,gamma))

        val subcheck = x:types.Type => y:types.Type => types.isSubtype(x,y,gamma)
        val pred = ((b:DeclType) =>
            val z = match b:
                da:types.DefType => 
                    if (c.name == da.name.name && types.checkArgList(argtypes,da.args,subcheck)) { option.Some[types.DefType](da) } else { option.None[types.DefType]() }
                default => option.None[types.DefType]()
            z
        )
        types.findInDeclList[types.DefType](unfold.decls, pred).retTyp

    f:bound.Field => //T-Field
        val recType = typecheckExpr(f.receiver, gamma)
        val unfold:types.UnfoldedType = types.unfoldType(recType, gamma)
        val pred = ((b:DeclType) =>
            val z = match b:
                va:types.ValType => 
                    if (f.field == va.name.name) { option.Some[types.ValType](va) } else { option.None[types.ValType]() }
                default => option.None[types.ValType]()
            z
        )
        types.findInDeclList[types.ValType](unfold.decls, pred).typ

    n:bound.New => //T-New
        val unfold:types.UnfoldedType = types.unfoldType(n.typ, gamma)
        def typeNewDecls(d:bound.Decl):DeclType
            val thisType = types.ValType(n.binding, n.typ)
            val ngamma = llist.Cons[DeclType](thisType, gamma)
            match d:
                v:bound.Val       => typecheckDecl(d, gamma)
                d:bound.Def       => typecheckDecl(d, ngamma)
                t:bound.TypeDecl  => typecheckDecl(d, ngamma)
                t:bound.TypeAlias => typecheckDecl(d, ngamma)
        val decls = types.UnfoldedType(n.body.map[DeclType](x => typeNewDecls(x)))
        if (types.isSubtype(decls, unfold, gamma))
            n.typ
          else
            error.report("invalid new expression, unfold = " + types.typeToString(unfold) + "\nnewexpr = " + types.typeToString(decls),error.unknownLocation)

    i:bound.Integer => 
        val pred = ((b:DeclType) =>
            val z = match b:
                tt:types.TypeType => 
                    if (tt.name.name == "Int") { option.Some[types.TypeType](tt) } else { option.None[types.TypeType]() }
                default => option.None[types.TypeType]()
            z
        ) 
        types.NominalType(types.findInDeclList[types.TypeType](gamma, pred).name)

    u:bound.UnitVal => types.UnitType()

    default => error.report("type error: unrecognized expression",error.unknownLocation)
