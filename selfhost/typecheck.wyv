module typecheck

import types
import bound
import error
import wyvern.option
import wyvern.collections.llist
type List = llist.LinkedList
type DeclType = types.DeclType
type Option = option.Option

def findInDeclList[T](gamma:List[DeclType], pred:DeclType->Option[T]):T
    def f(gamma:List[DeclType], pred:DeclType->Option[T]):Option[T]
        match gamma:
            c:llist.Cons => 
                match (pred(c.value)):
                    s:option.Some => s
                    default => f(c.next, pred)
            n:llist.Nil => option.None[T]()
    match f(gamma, pred):
        s:option.Some => s.get()
        default => error.report("search in decllist failed",error.unknownLocation)

def unfoldType(x:types.Type, gamma:List[DeclType]):types.UnfoldedType
    match x:
        u:types.UnitType => types.UnfoldedType(llist.Nil[DeclType]())
        x:types.NominalType => 
            val pred = ((b:DeclType) =>
                val z = match b:
                    t:types.TypeType => 
                        if (types.equalBinding(x.L, t.name)) { option.Some[types.TypeType](t) } else { option.None[types.TypeType]() }
                    default => option.None[types.TypeType]()
                z
            )
            findInDeclList[types.TypeType](gamma, pred).typ
        u:types.UnfoldedType => u


def typecheck(e:bound.Exp):types.Type
    getType(e,llist.Nil[DeclType]())

def getType(e:bound.Exp, gamma:List[DeclType]):types.Type = match e:
    v:bound.Var =>
        val pred = ((b:DeclType) => 
            val z = match b:
                va:types.ValType => 
                    if (types.equalBinding(v.binding,va.name)) { option.Some[types.ValType](va) } else { option.None[types.ValType]() }
                default => option.None[types.ValType]()
            z
        )
        findInDeclList[types.ValType](gamma, pred).typ

    c:bound.Call => //T-Invk
        val recType = getType(c.receiver, gamma)
        val unfold:types.UnfoldedType = unfoldType(recType, gamma)
        val pred = ((b:DeclType) =>
            val z = match b:
                da:types.DefType => 
                    if (c.name == da.name.name && types.equalType(getType(c.arg,gamma), da.argTyp)) { option.Some[types.DefType](da) } else { option.None[types.DefType]() }
                default => option.None[types.DefType]()
            z
        )
        findInDeclList[types.DefType](unfold.decls, pred).retTyp

    f:bound.Field => //T-Field
        val recType = getType(f.receiver, gamma)
        val unfold:types.UnfoldedType = unfoldType(recType, gamma)
        val pred = ((b:DeclType) =>
            val z = match b:
                va:types.ValType => 
                    if (f.field == va.name.name) { option.Some[types.ValType](va) } else { option.None[types.ValType]() }
                default => option.None[types.ValType]()
            z
        )
        findInDeclList[types.ValType](unfold.decls, pred).typ

    s:bound.Seq => typeSeq(s.exps,gamma)

    i:bound.Integer => 
        val pred = ((b:DeclType) =>
            val z = match b:
                tt:types.TypeType => 
                    if (tt.name.name == "Int") { option.Some[types.TypeType](tt) } else { option.None[types.TypeType]() }
                default => option.None[types.TypeType]()
            z
        ) 
        types.NominalType(findInDeclList[types.TypeType](gamma, pred).name)

    default => error.report("type error: not implemented yet",error.unknownLocation)

def typeSeq(es:List[bound.Exp], gamma:List[DeclType]):types.Type = match es:
    c:llist.Cons =>
        match c.next:
            n:llist.Nil => getType(c.value, gamma) //last expression
            cc:llist.Cons => 
                match c.value:
                    v:bound.Val => 
                        val typ = getType(v.exp, gamma)
                        val vt = types.ValType(v.binding, typ)
                        val gammaPrime = llist.Cons[DeclType](vt, gamma)
                        typeSeq(c.next, gammaPrime)
                    t:bound.TypeDecl =>
                        val tt = types.TypeType(t.name, types.UnfoldedType(t.members))
                        val gammaPrime = llist.Cons[DeclType](tt, gamma)
                        typeSeq(c.next, gammaPrime)
                    default =>
                        val typ = getType(c.value, gamma)
                        typeSeq(c.next, gamma)
    n:llist.Nil => error.report("program doesn't end in an expression", error.unknownLocation)
