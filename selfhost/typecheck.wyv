module typecheck

import types
import bound
import error
import wyvern.collections.llist
type List = llist.LinkedList
type DeclType = types.DeclType

def unfoldType(x:types.NominalType, gamma:List[DeclType]):DeclType
    val pred = ((b:DeclType) =>
        val z = match b:
            t:types.TypeType => x.L == t.name.name
            default => false
        z
    )
    llist.find[DeclType](gamma, pred).get()

def typecheck(e:bound.Exp):types.Type
    getType(e,llist.Nil[DeclType]())

def getType(e:bound.Exp, gamma:List[DeclType]):types.Type = match e:
    v:bound.Var =>
        val pred = ((b:DeclType) => 
            val z = match b:
                va:types.ValType => types.equalBinding(v.binding,va.name)
                default => false
            z
        )
        val value = llist.find[DeclType](gamma, pred).get()
        match value:
            va:types.ValType => va.typ
            default => error.report("var not bound",error.unknownLocation)

    s:bound.Seq => typeSeq(s.exps,gamma)

    i:bound.Integer => types.NominalType("Int")

    default => error.report("type error: not implemented yet",error.unknownLocation)

def typeSeq(es:List[bound.Exp], gamma:List[DeclType]):types.Type = match es:
    c:llist.Cons =>
        match c.next:
            n:llist.Nil => getType(c.value, gamma) //last expression
            cc:llist.Cons => 
                match c.value:
                    v:bound.Val => 
                        val typ = getType(v.exp, gamma)
                        val vt = types.ValType(v.binding, typ)
                        val gammaPrime = llist.Cons[DeclType](vt, gamma)
                        typeSeq(c.next, gammaPrime)
                    t:bound.TypeDecl =>
                        val tt = types.TypeType(t.name, types.UnfoldedType(t.members))
                        val gammaPrime = llist.Cons[DeclType](tt, gamma)
                        typeSeq(c.next, gammaPrime)
                    default =>
                        val typ = getType(c.value, gamma)
                        typeSeq(c.next, gamma)
    n:llist.Nil => error.report("program doesn't end in an expression", error.unknownLocation)
