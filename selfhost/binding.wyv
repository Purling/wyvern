import raw
import bound
import error
import lexUtil
import types
import wyvern.collections.llist

type List = llist.LinkedList

// es is in program order
def bindList(es:List[raw.Exp], ctx:bound.Context):List[bound.Exp] = match es:
    c:llist.Cons =>
        val b = bindHelper(c.value, ctx)
        match b:
            v:bound.Val =>
                val newCtx = ctx.extend(v.binding)
                llist.Cons[bound.Exp](b, bindList(c.next, newCtx))
            default   => llist.Cons[bound.Exp](b, bindList(c.next, ctx))
    n:llist.Nil  => llist.Nil[bound.Exp]()

def bind(e:raw.Exp, parse: String -> raw.Exp):bound.Exp
    bindHelper(e, bound.emptyContext(parse))

def bindDeclTypes(e:raw.Exp, context:bound.Context):List[types.DeclType] = match e:
    s:raw.Seq     => llist.flatten[types.DeclType](s.exps.map[List[types.DeclType]](x => bindDeclTypes(x, context)))
    v:raw.ValType =>
        val b = types.Binding(v.name, context.counter)
        llist.Singleton[types.DeclType](types.ValType(b,types.stringToType(v.typ)))
    default       => error.report("unexpected construct", error.unknownLocation)
    
def bindHelper(e:raw.Exp, context:bound.Context):bound.Exp = match e:
    v:raw.Var    => bound.Var(llist.find[types.Binding](context.bindings, (b:types.Binding) => v.name==b.name).get())
    a:raw.App    => bound.App(bindHelper(a.func, context), bindHelper(a.arg, context))
    l:raw.Lambda =>
        val b = types.Binding(l.name, context.counter)
        bound.Lambda(b, bindHelper(l.body, context.extend(b)))
    c:raw.Call   => bound.Call(bindHelper(c.receiver, context), c.name, bindHelper(c.arg, context))
    v:raw.Val    =>
        val b = types.Binding(v.name, context.counter)
        bound.Val(b, bindHelper(v.exp, context))
    t:raw.TypeDecl   =>
        val b = types.Binding(t.name, context.counter)
        bound.TypeDecl(b, bindDeclTypes(context.parse(lexUtil.stripLeadingWhitespace(t.decls)), context))
    s:raw.Seq    => bound.Seq(bindList(s.exps.reverse(), context))
    i:raw.Integer     => bound.Integer(i.str)
    default      => error.report("unexpected construct", error.unknownLocation)
