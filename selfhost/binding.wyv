import raw
import bound
import error
import lexUtil
import types
import typecheck
import wyvern.collections.llist

type List = llist.LinkedList
type DeclType = types.DeclType

def stringToType(s:String, ctx:bound.Context):types.Type
    if (s == "Unit")
            types.theUnit
        else
            val pred = ((b:DeclType) =>
                val z = match b:
                    tt:types.TypeType =>
                        if (tt.name.name == s) { option.Some[types.TypeType](tt) } else { option.None[types.TypeType]() }
                    default => option.None[types.TypeType]()
                z
            )
            types.makeNominalType(types.findInDeclList[types.TypeType](ctx.bindings, pred).name)

def bindDeclTypes(e:raw.Exp, context:bound.Context):DeclType = match e:
    v:raw.ValType =>
        val b = types.Binding(v.name, context.counter)
        types.ValType(b,stringToType(v.typ, context))
    d:raw.DefDecl =>
        val b = types.Binding(d.name, context.counter)
        val argtypes = d.args.map[types.Type]((e:raw.Arg) => stringToType(e.argTyp,context))
        types.DefType(b, argtypes, stringToType(d.retTyp,context))
    t:raw.TypeDecl =>
        val b = types.Binding(t.name, context.counter)
        val nominalDecl = types.TypeType(b, types.makeNominalType(b))

        val declSeq = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(t.decls)))
        val declList:List[DeclType] = declSeq.exps.map[DeclType](e => bindDeclTypes(e,context.extend(nominalDecl)))
        types.TypeType(b,types.makeRefines((declList)))

    default       => error.report("unexpected construct", error.unknownLocation)

def makeSeq(e:raw.Exp):raw.Seq = match e: //ensures that the whole expression is a Seq, in program order--actually all the raw Seqs are reversed
    s:raw.Seq => raw.Seq(s.exps.reverse())
    default => raw.Seq(llist.Singleton[raw.Exp](e))

def bind(e:raw.Exp, parse: String -> raw.Exp):bound.Statement
    bindStatement(makeSeq(e), bound.emptyContext(parse))

def bindStatement(e:raw.Seq, context:bound.Context):bound.Statement = match e.exps:
    c:llist.Cons => match c.next:
        cc:llist.Cons => 
            val b:bound.Decl = bindDecl(c.value, context)
            val decl:DeclType = match b:
                v:bound.Val =>
                    types.ValType(v.binding, v.typ)
                d:bound.Def =>
                    types.DefType(d.binding, d.args.map[types.Type](e => e.argTyp), d.retTyp)
                t:bound.TypeDecl =>
                    types.TypeType(t.name, types.makeRefines(t.members))
                t:bound.TypeAlias =>
                    types.TypeType(t.name, t.typ)
            val newCtx = context.extend(decl)
            bound.DeclStatement(b, bindStatement(raw.Seq(c.next), newCtx))
        default => bound.ExprStatement(bindExpr(c.value, context))
    default => error.report("empty statement",error.unknownLocation)

def bindDecl(e:raw.Exp, context:bound.Context):bound.Decl = match e:
    v:raw.Val => 
        val b = types.Binding(v.name, context.counter)
        val body = bindExpr(v.exp, context)
        val expType = typecheck.typecheckExpr(body, context.bindings)
        bound.Val(b, expType, body)
    v:raw.ValAnnot =>
        val b = types.Binding(v.name, context.counter)
        val body = bindExpr(v.exp, context)
        val expType = typecheck.typecheckExpr(body, context.bindings)
        val annotType = stringToType(v.typ,context)
        if (!types.isSubtype(expType,annotType,context.bindings))
            error.report("val expr doesn't match annotation",error.unknownLocation)
        bound.Val(b, annotType, body)
    d:raw.Def =>
        val b = types.Binding(d.name, context.counter)
        def rawToBoundArg(a:raw.Arg):bound.Arg
            val argb = types.Binding(a.arg, context.counter)
            bound.Arg(argb,stringToType(a.argTyp,context))
        val arglist = d.args.map[bound.Arg](a => rawToBoundArg(a))
        val argtypes = arglist.map[types.Type]((a:bound.Arg) => a.argTyp)
        val argdecls = arglist.map[types.ValType]((a:bound.Arg) => types.ValType(a.arg,a.argTyp))

        val methodDecl = types.DefType(b, argtypes, stringToType(d.retTyp,context))

        val defn = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(d.body)))
        bound.Def(b, arglist, methodDecl.retTyp, bindStatement(defn, context.extend(methodDecl).extendList(argdecls)))
    t:raw.TypeDecl =>
        val b = types.Binding(t.name, context.counter)
        val nominalDecl = types.TypeType(b, types.makeNominalType(b))

        val declSeq = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(t.decls)))
        val declList:List[DeclType] = declSeq.exps.map[DeclType](e => bindDeclTypes(e,context.extend(nominalDecl)))
        bound.TypeDecl(b, declList)
    t:raw.TypeAlias =>
        val b = types.Binding(t.name, context.counter)
        val aliasType = stringToType(t.alias, context)
        bound.TypeAlias(b, aliasType)
    default => error.report("not a declaration: " + raw.expToString(e),error.unknownLocation)

def bindExpr(e:raw.Exp, context:bound.Context):bound.Exp = match e:
    v:raw.Var    => 
        val pred = ((b:DeclType) =>
            val z = match b:
                vt:types.ValType =>
                    if (vt.name.name == v.name) { option.Some[types.ValType](vt) } else { option.None[types.ValType]() }
                default => option.None[types.ValType]()
            z
        )
        val binding = types.findInDeclList[types.ValType](context.bindings, pred).name
        bound.Var(binding)
    a:raw.App    => 
        val rec = bindExpr(a.func, context)
        val arg = bindExpr(a.arg, context)
        val app = bound.Call(rec, "apply", llist.Singleton[bound.Exp](arg))
        match rec:
            f:bound.Field => 
                //check if field is actually a method
                val recType = typecheck.typecheckExpr(f.receiver,context.bindings)
                val pred = ((b:types.DeclType) =>
                    val z = match b:
                        d:types.DefType => f.field == d.name.name
                        default => false
                    z
                )
                val searchMethod = llist.find[types.DeclType](types.unfoldType(recType,context.bindings), pred)
                match searchMethod:
                    s:option.Some => bound.Call(f.receiver, f.field, llist.Singleton[bound.Exp](arg))
                    default => app
            default => app
    l:raw.Lambda =>
        val argb = types.Binding(l.name, context.counter)
        val argDecl = types.ValType(argb, stringToType(l.argTyp, context))

        val newCtx = context.extend(argDecl)
        val boundExp = bindExpr(l.body, newCtx)
        val expType = typecheck.typecheckExpr(boundExp, newCtx.bindings)

        val applyb = types.Binding("apply", context.counter)
        val decl = types.DefType(applyb, llist.Singleton[types.Type](argDecl.typ), expType)
        val defDeclaration:bound.Decl = bound.Def(applyb, llist.Singleton[bound.Arg](bound.Arg(argb,argDecl.typ)), expType, bound.ExprStatement(boundExp))

        val thisb = types.Binding("_this", context.counter)
        val thisType = types.makeRefines(llist.Singleton[DeclType](decl))
        bound.New(thisb, thisType, llist.Singleton[bound.Decl](defDeclaration))
    c:raw.Call   => 
        bound.Call(bindExpr(c.receiver, context), c.name, c.args.map[bound.Exp](e => bindExpr(e, context)))
    f:raw.Field  =>
        bound.Field(bindExpr(f.receiver, context), f.field)
    n:raw.New    =>
        val b:types.Binding = types.Binding(n.thisName, context.counter)
        val typ:types.Type = stringToType(n.typeName, context)
        val thisDecl = types.ValType(b, typ)

        val parsedBody = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(n.body)))
        val boundDecls:List[bound.Decl] = parsedBody.exps.map[bound.Decl]((e:raw.Exp) => bindDecl(e, context.extend(thisDecl)))
        bound.New(b, typ, boundDecls)
    i:raw.Integer     => bound.Integer(i.str)
    u:raw.UnitVal     => bound.UnitVal()
    default      => error.report("unexpected construct in bindexpr: " + raw.expToString(e), error.unknownLocation)
