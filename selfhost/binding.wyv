import raw
import bound
import error
import lexUtil
import types
import wyvern.collections.llist

type List = llist.LinkedList

def stringToType(s:String, ctx:bound.Context):types.Type
    if (s == "Unit")
            types.UnitType()
        else
            val b:types.Binding = llist.find[types.Binding](ctx.bindings, (b:types.Binding) => b.name == s).get()
            types.NominalType(b)

def bindDeclTypes(e:raw.Exp, context:bound.Context):types.DeclType = match e:
    v:raw.ValType =>
        val b = types.Binding(v.name, context.counter)
        types.ValType(b,stringToType(v.typ, context))
    d:raw.DefDecl =>
        val b = types.Binding(d.name, context.counter)
        types.DefType(b, stringToType(d.argTyp, context), stringToType(d.retTyp,context))
    t:raw.TypeDecl =>
        val b = types.Binding(t.name, context.counter)
        val declSeq = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(t.decls)))
        val declList:List[types.DeclType] = declSeq.exps.map[types.DeclType](e => bindDeclTypes(e,context.extend(b)))
        types.TypeType(b, types.UnfoldedType(declList))
    default       => error.report("unexpected construct", error.unknownLocation)

def makeSeq(e:raw.Exp):raw.Seq = match e: //ensures that the whole expression is a Seq, in program order--actually all the raw Seqs are reversed
    s:raw.Seq => raw.Seq(s.exps.reverse())
    default => raw.Seq(llist.Singleton[raw.Exp](e))

def bind(e:raw.Exp, parse: String -> raw.Exp):bound.Statement
    bindStatement(makeSeq(e), bound.emptyContext(parse))

def bindStatement(e:raw.Seq, context:bound.Context):bound.Statement = match e.exps:
    c:llist.Cons => match c.next:
        cc:llist.Cons => 
            val b:bound.Decl = bindDecl(c.value, context)
            match b:
                v:bound.Val =>
                    val newCtx = context.extend(v.binding)
                    bound.DeclStatement(b, bindStatement(raw.Seq(c.next), newCtx))
                d:bound.Def =>
                    val newCtx = context.extend(d.binding)
                    bound.DeclStatement(b, bindStatement(raw.Seq(c.next), newCtx))
                t:bound.TypeDecl =>
                    val newCtx = context.extend(t.name)
                    bound.DeclStatement(b, bindStatement(raw.Seq(c.next), newCtx))
        default => bound.ExprStatement(bindExpr(c.value, context))
    default => error.report("empty statement",error.unknownLocation)

def bindDecl(e:raw.Exp, context:bound.Context):bound.Decl = match e:
    v:raw.Val => 
        val b = types.Binding(v.name, context.counter)
        bound.Val(b, bindExpr(v.exp, context))
    d:raw.Def =>
        val b = types.Binding(d.name, context.counter)
        val argb = types.Binding(d.arg, context.counter)
        val defn = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(d.body)))
        bound.Def(b, argb, stringToType(d.argTyp,context), stringToType(d.retTyp,context), bindStatement(defn, context.extend(b).extend(argb)))
    t:raw.TypeDecl =>
        val b = types.Binding(t.name, context.counter)
        val declSeq = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(t.decls)))
        val declList:List[types.DeclType] = declSeq.exps.map[types.DeclType](e => bindDeclTypes(e,context.extend(b)))
        bound.TypeDecl(b, declList)
    default => error.report("not a declaration: " + raw.expToString(e),error.unknownLocation)

def bindExpr(e:raw.Exp, context:bound.Context):bound.Exp = match e:
    v:raw.Var    => bound.Var(llist.find[types.Binding](context.bindings, (b:types.Binding) => v.name == b.name).get())
    a:raw.App    => bound.App(bindExpr(a.func, context), bindExpr(a.arg, context))
    l:raw.Lambda =>
        val b = types.Binding(l.name, context.counter)
        bound.Lambda(b, bindExpr(l.body, context.extend(b)))
    c:raw.Call   => 
        bound.Call(bindExpr(c.receiver, context), c.name, bindExpr(c.arg, context))
    f:raw.Field  =>
        bound.Field(bindExpr(f.receiver, context), f.field)
    n:raw.New =>
        val b:types.Binding = types.Binding(n.thisName, context.counter)
        val typ:types.Type = stringToType(n.typeName, context)
        val parsedBody = makeSeq(context.parse(lexUtil.stripLeadingWhitespace(n.body)))
        val boundDecls:List[bound.Decl] = parsedBody.exps.map[bound.Decl]((e:raw.Exp) => bindDecl(e, context.extend(b)))
        bound.New(b, typ, boundDecls)
    i:raw.Integer     => bound.Integer(i.str)
    default      => error.report("unexpected construct in bindexpr: " + raw.expToString(e), error.unknownLocation)
