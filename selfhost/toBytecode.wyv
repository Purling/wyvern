module def toBytecode(javascript:JavaScript, js:Dyn)

import bound
import bytecode
import wyvern.collections.llist
import error
type List = llist.LinkedList

val b = bytecode(javascript, js)

def toBytecode(e:bound.Statement):b.SeqExpr
    b.SeqExpr(toBytecodeStmt(e))

def toBytecodeStmt(e:bound.Statement):List[b.SeqStmt] = match e:
    d:bound.DeclStatement => 
        val declBytecode = b.DeclStmt(toBytecodeDecl(d.decl))
        val stmtBytecode = toBytecodeStmt(d.stmt)
        llist.Cons[b.SeqStmt](declBytecode, stmtBytecode)
    e:bound.ExprStatement => 
        llist.Singleton[b.SeqStmt](b.ExpStmt(toBytecodeExpr(e.exp)))

def toBytecodeDecl(e:bound.Decl):b.Decl = match e:
    v:bound.Val       => b.ValDecl(v.binding.name, toBytecodeExpr(v.exp))
    d:bound.Def       => b.MethodDecl(d.binding.name, d.args.map[String](e => e.arg.name), b.SeqExpr(toBytecodeStmt(d.body)))
    t:bound.TypeDecl  => b.ValDecl("_", toBytecodeExpr(bound.UnitVal()))
    t:bound.TypeAlias => b.ValDecl("_", toBytecodeExpr(bound.UnitVal()))
    s:bound.SubtypeDecl => b.ValDecl("_", toBytecodeExpr(bound.UnitVal()))

    default => error.report("not a declaration",error.unknownLocation)

def toBytecodeExpr(e:bound.Exp):b.Expr = match e:
    v:bound.Var     => b.VarExpr(v.binding.name)
    c:bound.Call    => b.CallExpr(toBytecodeExpr(c.receiver), c.name, c.args.map[b.Expr](e => toBytecodeExpr(e)), false)
    f:bound.Field   => b.AccessExpr(toBytecodeExpr(f.receiver), f.field)
    // no lambda or app case - should have been lowered away
    n:bound.New     => b.NewExpr(n.binding.name, n.body.map[b.Decl](d => toBytecodeDecl(d)))
    i:bound.Integer => b.IntLit(i.str)
    u:bound.UnitVal => b.IntLit("0")

def writeExpToFile(e:bound.Statement, filename:String):Unit
    js.log("Converting expression to bytecode...\n")
    val expBytecode = toBytecode(e)
    //js.log(d.sequenceExpression.statements.get(0).declaration)
    js.log("Creating top level bytecode...\n")
    val fileBytecode = b.singletonBytecode(b.toplevel(expBytecode))
    js.log("Actually saving...\n")
    b.saveBytecode(filename, fileBytecode)

/*
// test code
val expr = b.StrLit("Hello")
b.encodeExpr(expr)
val apply = b.MethodDecl("apply", llist.Singleton[String]("x"), b.VarExpr("x"))
val expr2 = b.NewExpr("this", llist.Singleton[b.Decl](apply))
val callExpr = b.CallExpr(expr2, "apply", llist.Singleton[b.Expr](expr), false)
b.encodeExpr(callExpr)
*/
