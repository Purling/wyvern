/* A lexer for the untyped lambda calculus

example: (x => x) (y => y)

IDENTIFIER  [a-zA-Z][a-zA-Z0-9_]*
LPAREN      (   
RPAREN      )
WHITESPACE  [ \t\r\l]+
DARROW      =>

*/

require stdout

import wyvern.util.matching.regex
import wyvern.collections.llist
import wyvern.pair

import lexer

// FIX: define these with a nice DSL
val identPat = regex("[a-zA-Z][a-zA-Z0-9_]*")
val lparenPat = regex("\\(")
val rparenPat = regex("\\)")
val whitespacePat = regex("[ \t\r\f]+")
val darrowPat = regex("=>")

datatype TokenKind
    IDENTIFIER
    LPAREN
    RPAREN
    WHITESPACE
    DARROW
    
// FIX: no parens for unit constructors    
val t : TokenKind = IDENTIFIER()

type LexPair = pair.Pair[regex.Regex, TokenKind]
type TableType = llist.LinkedList[LexPair]

// FIX: Pair and Regex are structural types; should be declared at top level
// FIX: annoying to not infer type argument to Nil
var lexTable : TableType = llist.Nil[LexPair]()

def addLexEntry(pattern: regex.Regex, kind:TokenKind):Unit
    lexTable = llist.Cons[LexPair](pair.Pair[regex.Regex, TokenKind](pattern, kind), lexTable)
    
// FIX: either use a literal syntax for lists
// or be imperative with a literal syntax for pairs: lexTable.add({identPat, IDENTIFIER})
addLexEntry(identPat, IDENTIFIER())
addLexEntry(lparenPat, LPAREN())
addLexEntry(rparenPat, RPAREN())
addLexEntry(whitespacePat, WHITESPACE())
addLexEntry(darrowPat, DARROW())

val testLexer = lexer[TokenKind](lexTable)

// FIX: don't need a _ for these!
def printKind(kind:TokenKind):Unit = match kind:
    _:IDENTIFIER => stdout.print("IDENTIFIER")
    _:LPAREN => stdout.print("LPAREN")
    _:RPAREN => stdout.print("RPAREN")
    _:WHITESPACE => stdout.print("WHITESPACE")
    _:DARROW => stdout.print("DARROW")

def printTokens(result:testLexer.ParseResult):Unit = match result:
    s:testLexer.Success => 
        s.tokens.do(t =>
            printKind(t.kind)
            stdout.print(": '" + t.value + "'")
            stdout.println()
        )
    e:testLexer.Error => stdout.print("Lex error: " + e.unmatchableText)

// test it
/*val m = identPat.findPrefixMatchOf("h3llo+5").get()
stdout.print(m.matched())
stdout.println()
stdout.print(m.after())
stdout.println()*/

val res:testLexer.ParseResult = testLexer.lex("(x => x) (y => y)")
printTokens(res)
match res:
    e:testLexer.Error => 0
    s:testLexer.Success => s.tokens.size()