import wyvern.pair
import wyvern.util.matching.regex
import wyvern.collections.llist
import lexer
import Lexer

module def lexBuilder[TokKind]() : LexBuilder[TokKind]

// FIX: Pair and Regex are structural types; should be declared at top level
type LexPair = pair.Pair[regex.Regex, TokKind]
type TableType = llist.LinkedList[LexPair]

// FIX: annoying to not infer type argument to Nil
var lexTable:TableType = llist.Nil[LexPair]()

type TokenKind = TokKind

def addEntry(pattern: regex.Regex, kind:TokenKind):Unit
    lexTable = llist.Cons[LexPair](pair.Pair[regex.Regex, TokKind](pattern, kind), lexTable)

def build():Lexer[TokKind] = lexer[TokKind](lexTable)

