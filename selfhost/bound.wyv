module bound

import raw
import types
import wyvern.collections.llist
type List = llist.LinkedList
type Counter = types.Counter
type Binding = types.Binding
type DeclType = types.DeclType

resource type Context
    val bindings:List[DeclType]
    val counter:Counter
    val parse:String -> raw.Exp
    def extend(b:DeclType):Context
    def extendList(b:List[DeclType]):Context

def Context(bs:List[DeclType], c:Counter, p:String -> raw.Exp) : Context = new
    val bindings = bs
    val counter = c
    val parse = p
    def extend(b:DeclType):Context
        Context(llist.Cons[DeclType](b, bs), c, p)
    def extendList(b:List[DeclType]):Context
        val newBindings = b.append(bs)
        Context(newBindings,c,p)
    
def emptyContext(p:String -> raw.Exp):Context = Context(llist.Nil[DeclType](), types.Counter(), p)

type Arg
    val arg:Binding
    val argTyp:types.Type
def Arg(arg:Binding,argTyp:types.Type):Arg = new
    val arg = arg
    val argTyp = argTyp

datatype Statement
    DeclStatement(decl:Decl, stmt:Statement)
    ExprStatement(exp:Exp)

datatype Decl
    Val(binding:Binding, typ:types.Type, exp:Exp)
    Def(binding:Binding, args:List[Arg], retTyp:types.Type, body:Statement)
    TypeDecl(name:Binding, members:List[DeclType])
    TypeAlias(name:Binding, typ:types.Type)
    SubtypeDecl(subtype:types.Type, supertype:types.Type)

datatype Exp
    Var(binding:Binding)
    Call(receiver:Exp, name:String, args:List[Exp])
    Field(receiver:Exp, field:String)
    New(binding:Binding, typ:types.Type, body:List[Decl])
    Integer(str:String)
    UnitVal()

def lowerStatement(stmt:Statement):Statement = match stmt:
    d:DeclStatement => DeclStatement(lowerDecl(d.decl), lowerStatement(d.stmt))
    e:ExprStatement => ExprStatement(lowerExp(e.exp))

def lowerDecl(decl:Decl):Decl = match decl:
    v:Val         => Val(v.binding, v.typ, lowerExp(v.exp))
    d:Def         => Def(d.binding, d.args, d.retTyp, lowerStatement(d.body))
    t:TypeDecl    => t
    t:TypeAlias   => t
    s:SubtypeDecl => s

def lowerExp(exp:Exp):Exp = match exp:
    v:Var     => v
    c:Call    => Call(lowerExp(c.receiver), c.name, c.args.map[Exp](e => lowerExp(e)))
    f:Field   => Field(lowerExp(f.receiver), f.field)
    n:New     => New(n.binding, n.typ, n.body.map[Decl](d => lowerDecl(d)))
    i:Integer => i
    u:UnitVal => u
