module bound

import types
import wyvern.collections.llist
type List = llist.LinkedList
type Counter = types.Counter
type Binding = types.Binding
type DeclType = types.DeclType


def lowerStatement(stmt:types.Statement):types.Statement = match stmt:
    d:types.DeclStatement => types.DeclStatement(lowerDecl(d.decl), lowerStatement(d.stmt))
    e:types.ExprStatement => types.ExprStatement(lowerExp(e.exp))

def lowerDecl(decl:types.Decl):types.Decl = match decl:
    v:types.Val         => types.Val(v.binding, v.typ, lowerExp(v.exp))
    d:types.Def         => types.Def(d.binding, d.args, d.retTyp, lowerStatement(d.body))
    t:types.TypeDecl    => t
    s:types.SubtypeDecl => s
    m:types.TypeEq  => m

def lowerExp(exp:types.Exp):types.Exp = match exp:
    v:types.Var     => v
    c:types.Call    => types.Call(lowerExp(c.receiver), c.name, c.args.map[types.Exp](e => lowerExp(e)))
    f:types.Field   => types.Field(lowerExp(f.receiver), f.field)
    n:types.New     => types.New(n.binding, n.typ, n.body.map[types.Decl](d => lowerDecl(d)))
    i:types.Integer => i
    u:types.UnitVal => u
