module bound

import raw
import types
import wyvern.collections.llist
type List = llist.LinkedList
type Counter = types.Counter
type Binding = types.Binding

resource type Context
    val bindings:List[Binding]
    val counter:Counter
    val parse:String -> raw.Exp
    def extend(b:Binding):Context

def Context(bs:List[Binding], c:Counter, p:String -> raw.Exp) : Context = new
    val bindings = bs
    val counter = c
    val parse = p
    def extend(b:Binding):Context
        Context(llist.Cons[Binding](b, bs), c, p)
    
def emptyContext(p:String -> raw.Exp):Context = Context(llist.Nil[Binding](), types.Counter(), p)

datatype Statement
    DeclStatement(decl:Decl, stmt:Statement)
    ExprStatement(exp:Exp)

datatype Decl
    Val(binding:Binding, exp:Exp)
    Def(binding:Binding, arg:Binding, argTyp:types.Type, retTyp:types.Type, body:Statement)
    TypeDecl(name:Binding, members:List[types.DeclType])

datatype Exp
    Var(binding:Binding)
    App(func:Exp, arg:Exp)
    Lambda(binding:Binding, body:Exp)
    Call(receiver:Exp, name:String, arg:Exp)
    Field(receiver:Exp, field:String)
    New(binding:Binding, typ:types.Type, body:List[Decl])
    Integer(str:String)
    UnitVal()

def lowerStatement(stmt:Statement):Statement = match stmt:
    d:DeclStatement => DeclStatement(lowerDecl(d.decl), lowerStatement(d.stmt))
    e:ExprStatement => ExprStatement(lowerExp(e.exp))

def lowerDecl(decl:Decl):Decl = match decl:
    v:Val  => Val(v.binding, lowerExp(v.exp))
    d:Def  => Def(d.binding, d.arg, d.argTyp, d.retTyp, lowerStatement(d.body))
    t:TypeDecl => t

def lowerExp(exp:Exp):Exp = match exp:
    v:Var     => v
    a:App     => Call(lowerExp(a.func), "apply", lowerExp(a.arg))
    l:Lambda  => UnitVal()//Obj(llist.Singleton[Method](Method("apply", l.binding, lower(l.body))))
    c:Call    => Call(lowerExp(c.receiver), c.name, lowerExp(c.arg))
    f:Field   => Field(lowerExp(f.receiver), f.field)
    n:New     => New(n.binding, n.typ, n.body.map[Decl](d => lowerDecl(d)))
    i:Integer => i
    u:UnitVal => u
