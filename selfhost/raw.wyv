module raw

import wyvern.collections.llist
type List = llist.LinkedList


datatype Exp
    Var(name:String)
    App(func:Exp, arg:Exp)
    Lambda(name:String, body:Exp)
    Val(name:String, exp:Exp)
    Seq(exps:List[Exp])

def expToString(e:Exp):String = match e:
    v:Var    => v.name
    a:App    => "(" + expToString(a.func) + ") (" + expToString(a.arg) + ")"
    l:Lambda => l.name + " => " + expToString(l.body)
    v:Val    => "val " + v.name + " = " + expToString(v.exp)
    s:Seq    => s.exps.foldRight[String]((e:Exp, s:String) => s + "\n" + expToString(e), "")
    default  =>
                    "typecheck issue!"

