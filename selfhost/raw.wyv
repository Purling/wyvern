module raw

import wyvern.collections.llist
type List = llist.LinkedList


datatype Exp
    Var(name:String)
    App(func:Exp, arg:Exp)
    Lambda(name:String, body:Exp)
    Call(receiver:Exp, name:String, arg:Exp)
    Field(receiver:Exp, field:String)
    Val(name:String, exp:Exp)
    ValType(name:String, typ:String)
    TypeDecl(name:String, decls:String)
    DefDecl(name:String, arg:String, argTyp:String, retTyp:String)
    NewType(name:String, body:String)
    Seq(exps:List[Exp])
    Integer(str:String)    

def expToString(e:Exp):String = match e:
    v:Var    => v.name
    a:App    => "(" + expToString(a.func) + ") (" + expToString(a.arg) + ")"
    l:Lambda => l.name + " => " + expToString(l.body)
    c:Call   => expToString(c.receiver) + "." + c.name + "(" + expToString(c.arg) + ")" 
    f:Field  => expToString(f.receiver) + "." + f.field
    v:Val    => "val " + v.name + " = " + expToString(v.exp)
    t:TypeDecl => "type " + t.name + ":\n" + t.decls
    n:NewType => "new " + n.name + ":\n" + n.body
    s:Seq    => s.exps.foldRight[String]((e:Exp, s:String) => s + "\n" + expToString(e), "")
    i:Integer => i.str
    default   => "typecheck issue!"

