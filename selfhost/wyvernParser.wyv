module wyvernParser

import lexing
import metadata parsing
import raw
import wyvern.collections.llist

def makeSeq(e1:raw.Exp, e2:raw.Exp):raw.Seq = match e1:
    s:raw.Seq   => raw.Seq(llist.Cons[raw.Exp](e2, s.exps))
    default     => raw.Seq(llist.Cons[raw.Exp](e2, llist.Singleton[raw.Exp](e1)))

val grammar: parsing.Grammar = ~
    Stmts -> %logline Stmt                                : a:Dyn => a.get(1)
           | Stmts %logline Stmt                          : a:Dyn => makeSeq(a.get(0), a.get(2))
           
    Stmt  -> ExprLambda                                                  : a:Dyn => a.get(0)
           | %val %identifier %eq ExprLambda                             : a:Dyn => raw.Val(a.get(1).value, a.get(3))
           | %def %identifier %lparen %identifier %rparen %eq ExprLambda : a:Dyn => raw.Val(a.get(1).value, raw.Lambda(a.get(3).value, a.get(6)))
           | %type %identifier %colon %block                             : a:Dyn => raw.TypeDecl(a.get(1).value, a.get(3).value)
           | %val %identifier %colon Type                                : a:Dyn => raw.ValType(a.get(1).value, a.get(3))
           | %def %identifier %lparen %identifier %colon Type %rparen %colon Type : a:Dyn => raw.DefDecl(a.get(1).value, a.get(3).value, a.get(5), a.get(8))
           | %def %plus %lparen %identifier %colon Type %rparen %colon Type  : a:Dyn => raw.DefDecl("+", a.get(3).value, a.get(5), a.get(8))
           | %def %minus %lparen %identifier %colon Type %rparen %colon Type : a:Dyn => raw.DefDecl("-", a.get(3).value, a.get(5), a.get(8))

    Type  -> %identifier                                  : a:Dyn => a.get(0).value
           
    ExprLambda -> ExprAddSub                              : a:Dyn => a.get(0)
                | %identifier %darrow ExprLambda          : a:Dyn => raw.Lambda(a.get(0).value, a.get(2))

    ExprAddSub -> ExprMultDiv                             : a:Dyn => a.get(0)
                | ExprAddSub %plus ExprMultDiv            : a:Dyn => raw.Call(a.get(0),"+",a.get(2))
                | ExprAddSub %minus ExprMultDiv           : a:Dyn => raw.Call(a.get(0),"-",a.get(2))

    ExprMultDiv -> ExprAppl                               : a:Dyn => a.get(0)
                 | ExprMultDiv %times ExprAppl            : a:Dyn => raw.Call(a.get(0),"*",a.get(2))
                 | ExprMultDiv %divide ExprAppl           : a:Dyn => raw.Call(a.get(0),"/",a.get(2))
                 | ExprMultDiv %mod ExprAppl              : a:Dyn => raw.Call(a.get(0),"%",a.get(2))

    ExprAppl -> ExprUnary                                 : a:Dyn => a.get(0)
              | ExprAppl Primary                          : a:Dyn => raw.App(a.get(0), a.get(1))

    ExprUnary -> Primary                                  : a:Dyn => a.get(0)
               | %minus Primary                           : a:Dyn => raw.Call(raw.Integer("0"),"_MINUS_",a.get(1))

    Primary -> %identifier                                : a:Dyn => raw.Var(a.get(0).value)
             | %lparen ExprLambda %rparen                 : a:Dyn => a.get(1)
             | %integer                                   : a:Dyn => raw.Integer(a.get(0).value)
             


def makeParser(lexer:lexing.Lexer):parsing.Parser
    parsing.makeParser(grammar, lexer)