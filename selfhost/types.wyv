module types

import wyvern.option
import wyvern.collections.llist
import error
type Option = option.Option
type List = llist.LinkedList

resource type Counter
    var value:Int
def Counter():Counter = new
    var value:Int = 0

type Binding
    val name:String
    val id:Int
def Binding(name:String, c:Counter):Binding
    val count = c.value
    c.value = c.value + 1
    new
        val name = name
        val id = count

def equalBinding(b1:Binding, b2:Binding):Boolean
    b1.name == b2.name && b1.id == b2.id
//////////////////////////////
datatype BaseType
    UnitType()
    NominalType(L:Binding)

type Type
    val base:BaseType
    val refines:List[DeclType]
def Type(b:BaseType, r:List[DeclType]):Type = new
    val base = b
    val refines = r
def makeNominalType(L:Binding):Type = new
    val base = NominalType(L)
    val refines = llist.Nil[DeclType]()
def makeRefines(ls:List[DeclType]):Type = new
    val base = UnitType()
    val refines = ls
def makeBase(b:BaseType):Type
    Type(b,llist.Nil[DeclType]())

datatype DeclType
    ValType(name:Binding, typ:Type)
    TypeType(name:Binding, unfld:Type)
    DefType(name:Binding, args:List[Type], retTyp:Type)
    SubtypeType(subtype:Type, supertype:Type)

val theUnit = Type(UnitType(),llist.Nil[DeclType]())
//////////////////////////////
def findInDeclList[T](gamma:List[DeclType], pred:DeclType->Option[T]):T
    def f(gamma:List[DeclType], pred:DeclType->Option[T]):Option[T]
        match gamma:
            c:llist.Cons => 
                match (pred(c.value)):
                    s:option.Some => s
                    default => f(c.next, pred)
            n:llist.Nil => option.None[T]()
    match f(gamma, pred):
        s:option.Some => s.get()
        default => error.report("search in decllist failed",error.unknownLocation)

def findTypePredicate(bind:Binding):DeclType->Option[TypeType]
    val pred = ((b:DeclType) =>
        val z = match b:
            t:TypeType => if (equalBinding(bind, t.name)) { option.Some[TypeType](t) } else { option.None[TypeType]() }
            default => option.None[TypeType]()
        z
    )
    pred

def unfoldType(x:Type, gamma:List[DeclType]):List[DeclType]
    val decls = match x.base:
        u:UnitType => llist.Nil[DeclType]()
        x:NominalType => 
            val pred = findTypePredicate(x.L)
            unfoldType(findInDeclList[TypeType](gamma, pred).unfld,gamma)
    x.refines.append(decls)

def combineStringList(ls:List[String]):String = match ls:
    c:llist.Cons => match c.next:
        n:llist.Nil => c.value
        cc:llist.Cons => c.value + ", " + combineStringList(c.next)
    default => ""

def declTypeToString(d:DeclType):String = match d:
    v:ValType => "val " + v.name.name + ":" + typeToString(v.typ)
    t:TypeType => "type " + t.name.name + ":" + typeToString(t.unfld)
    d:DefType => 
        val arglist = d.args.map[String](t => typeToString(t))
        "def " + d.name.name + "(" + combineStringList(arglist) + "):" + typeToString(d.retTyp)

def typeToString(t:Type):String
    val baseString = match t.base:
        u:UnitType => "Unit"
        n:NominalType => n.L.name
    val s = t.refines.map[String](e => declTypeToString(e))
    val refinesString = combineStringList(s)
    baseString + " {" + refinesString + "}"
