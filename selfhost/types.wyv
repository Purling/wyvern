module types

import selfhost.raw
import wyvern.option
import wyvern.collections.llist
import selfhost.error
type Option = option.Option
type List = llist.LinkedList

//////////////////////////////
//Binding defn
resource type Counter
    var value:Int
def Counter():Counter = new
    var value:Int = 0

type Binding
    val name:String
    val id:Int
def Binding(name:String, c:Counter):Binding
    val count = c.value
    c.value = c.value + 1
    new
        val name = name
        val id = count

def equalBinding(b1:Binding, b2:Binding):Boolean
    b1.name == b2.name && b1.id == b2.id
//////////////////////////////
//bound AST defn
resource type Context
    val bindings:List[DeclType]
    val counter:Counter
    val parse:String -> raw.Exp
    def extend(b:DeclType):Context
    def extendList(b:List[DeclType]):Context

def Context(bs:List[DeclType], c:Counter, p:String -> raw.Exp) : Context = new
    val bindings = bs
    val counter = c
    val parse = p
    def extend(b:DeclType):Context
        Context(llist.Cons[DeclType](b, bs), c, p)
    def extendList(b:List[DeclType]):Context
        val newBindings = b.append(bs)
        Context(newBindings,c,p)
    
def emptyContext(p:String -> raw.Exp):Context = Context(llist.Nil[DeclType](), Counter(), p)

datatype Statement
    DeclStatement(decl:Decl, stmt:Statement)
    ExprStatement(exp:Exp)

datatype Decl
    Val(binding:Binding, typ:Type, exp:Exp)
    Def(binding:Binding, args:List[ValType], retTyp:Type, body:Statement)
    TypeDecl(name:Binding, z:Binding, typ:List[DeclType])
    SubtypeDecl(subtype:Type, supertype:Type)
    TypeEq(name:Binding, typ:Type)

datatype Exp
    Var(binding:Binding)
    Call(receiver:Exp, name:String, args:List[Exp])
    Field(receiver:Exp, field:String)
    New(binding:Binding, typ:Type, body:List[Decl])
    Integer(str:String)
    UnitVal()
//////////////////////////////
//Type defn
datatype BaseType
    UnitType()
    BotType()
    NominalType(L:Binding)
    PathType(p:Exp, t:String)

type Type
    val base:BaseType
    val refines:List[DeclType]
def Type(b:BaseType, r:List[DeclType]):Type = new
    val base = b
    val refines = r
def makeNominalType(L:Binding):Type = new
    val base = NominalType(L)
    val refines = llist.Nil[DeclType]()
def makeRefines(ls:List[DeclType]):Type = new
    val base = UnitType()
    val refines = ls

datatype Bound
    LEQ()    
    EQ()
    GEQ()

datatype DeclType
    ValType(name:Binding, typ:Type)
    TypeType(name:Binding, z:Binding, unfld:List[DeclType])
    DefType(name:Binding, args:List[ValType], retTyp:Type)
    SubtypeType(subtype:Type, supertype:Type)
    MemberType(name:Binding, bound:Bound, typ:Type)

val theUnit = Type(UnitType(),llist.Nil[DeclType]())
//////////////////////////////
def substituteBaseType(beta:BaseType, newb:Exp, oldb:Binding):BaseType = match beta:
    p:PathType => PathType(substituteExp(p.p,newb,oldb),p.t)
    default => beta
        
def substituteType(tau:Type, newb:Exp, oldb:Binding):Type
    val subBase = substituteBaseType(tau.base,newb,oldb)
    val subRefines = tau.refines.map[DeclType](e => substituteDeclType(e,newb,oldb))
    Type(subBase,subRefines)

def substituteDeclType(d:DeclType, newb:Exp, oldb:Binding):DeclType = match d:
    v:ValType     => ValType(v.name,substituteType(v.typ,newb,oldb))
    t:TypeType    => TypeType(t.name,t.z,t.unfld.map[DeclType](e => substituteDeclType(e,newb,oldb)))
    d:DefType     => DefType(d.name,d.args.map[ValType](e=>ValType(e.name,substituteType(e.typ,newb,oldb))),substituteType(d.retTyp,newb,oldb))
    s:SubtypeType => SubtypeType(substituteType(s.subtype,newb,oldb),substituteType(s.supertype,newb,oldb))
    m:MemberType  => MemberType(m.name,m.bound,substituteType(m.typ,newb,oldb))

def substituteExp(e:Exp, newb:Exp, oldb:Binding):Exp = match e:
    v:Var => if (equalBinding(v.binding, oldb)) { newb } else { v }
    f:Field => Field(substituteExp(f.receiver,newb,oldb),f.field)
    default => error.report("Substitution into invalid path type",error.unknownLocation)
