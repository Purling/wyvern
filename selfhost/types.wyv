module types

import wyvern.collections.llist
type List = llist.LinkedList

resource type Counter
    var value:Int
def Counter():Counter = new
    var value:Int = 0

type Binding
    val name:String
    val id:Int
def Binding(name:String, c:Counter):Binding
    val count = c.value
    c.value = c.value + 1
    new
        val name = name
        val id = count

def equalBinding(b1:Binding, b2:Binding):Boolean
    b1.name == b2.name && b1.id == b2.id

def equalDeclType(a:DeclType, b:DeclType):Boolean
    match a:
        v:ValType => match b:
            u:ValType => v.name.name == u.name.name && equalType(v.typ,u.typ)
            default => false
        t:TypeType => match b:
            u:TypeType => t.name.name == u.name.name && equalType(t.typ,u.typ)
            default => false
        d:DefType => match b:
            u:DefType => d.name.name == u.name.name && equalType(d.argTyp,u.argTyp) && equalType(d.retTyp,u.retTyp)
            default => false

def equalType(t1:Type, t2:Type):Boolean
    match t1:
        u:UnitType => match t2:
            v:UnitType => true
            default => false
        n:NominalType => match t2:
            v:NominalType => equalBinding(n.L, v.L)
            default => false
        u:UnfoldedType => match t2:
            v:UnfoldedType =>
                if (u.decls.size() == v.decls.size())
                        def f(a:List[DeclType], b:List[DeclType]):Boolean = match a:
                            c:llist.Cons => match b:
                                d:llist.Cons => equalDeclType(c.value,d.value) && f(c.next,d.next)
                            n:llist.Nil => true
                        f(u.decls, v.decls)
                    else
                        false
            default => false

datatype Type
    UnitType()
    NominalType(L:Binding)
    UnfoldedType(decls:List[DeclType])

datatype DeclType
    ValType(name:Binding, typ:Type)
    TypeType(name:Binding, typ:UnfoldedType)
    DefType(name:Binding, argTyp:Type, retTyp:Type)

def typeToString(t:Type):String = match t:
    u:UnitType => "Unit"
    n:NominalType => n.L.name
