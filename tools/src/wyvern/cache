stdlib/support/AST.java:    public ForwardDeclaration forwardDeclaration(ObjectValue valueType, String fieldName) {
target/corewyvernIL/astvisitor/PlatformSpecializationVisitor.java:    public ASTNode visit(PSVState state, ForwardDeclaration forwardDecl) {
target/corewyvernIL/astvisitor/PlatformSpecializationVisitor.java:        return forwardDecl;
target/corewyvernIL/astvisitor/TypeVisitor.java:    public T visit(S state, ForwardDeclaration forwardDecl) {
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:        List<OIRForward> forwards = new Vector<OIRForward>();
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:                OIRForward oirforward;
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:                oirforward = (OIRForward) decl.acceptVisitor(this, new EmitOIRState(ctx, classEnv));
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:                forwards.add(oirforward);
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:        OIRClassDeclaration classDecl = new OIRClassDeclaration(classEnv, className, newExpr.getSelfName(), forwards, memberDecls,
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:    public OIRAST visit(EmitOIRState state, ForwardDeclaration forwardDecl) {
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:        OIRForward oirforward = new OIRForward(null, forwardDecl.getFieldName());
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:        oirforward.copyMetadata(forwardDecl);
target/corewyvernIL/astvisitor/EmitOIRVisitor.java:        return oirforward;
target/corewyvernIL/astvisitor/DeclTypeVisitor.java:    public T visit(S state, ForwardDeclaration forwardDecl) {
target/corewyvernIL/astvisitor/TailCallVisitor.java:    public Void visit(Boolean inTailPosition, ForwardDeclaration forwardDecl) {
target/corewyvernIL/astvisitor/ASTVisitor.java:    public abstract T visit(S state, ForwardDeclaration forwardDecl);
target/corewyvernIL/transformers/DynCastsTransformer.java:    public ForwardDeclaration visit(TypeContext ctx, ForwardDeclaration forwardDecl) {
target/corewyvernIL/transformers/DynCastsTransformer.java:        return forwardDecl;
target/corewyvernIL/support/QuantificationLifter.java:        public NamedDeclaration visit(State state, ForwardDeclaration forwardDecl) {
target/corewyvernIL/expression/ObjectValue.java:    private ObjectValue forwardTarget;
target/corewyvernIL/expression/ObjectValue.java:    public ObjectValue(List<Declaration> decls, BindingSite selfSite, ValueType exprType, ForwardDeclaration forwardDecl, FileLocation loc, EvalContext ctx) {
target/corewyvernIL/expression/ObjectValue.java:        hasForward = (forwardDecl != null);
target/corewyvernIL/expression/ObjectValue.java:            forwardTarget = (ObjectValue) ctx.lookupValue(forwardDecl.getFieldName());
target/corewyvernIL/expression/ObjectValue.java:                return forwardTarget.invoke(methodName, args);
target/corewyvernIL/expression/ObjectValue.java:        } else if (forwardTarget != null && forwardTarget.findDecl(fieldName, false) != null) {
target/corewyvernIL/expression/ObjectValue.java:            return forwardTarget.getField(fieldName);
target/corewyvernIL/expression/ObjectValue.java:        return evalCtx.hashCode() + forwardTarget.hashCode();
target/corewyvernIL/expression/New.java:    private ForwardDeclaration forwardDeclaration;
target/corewyvernIL/expression/New.java:        Optional<? extends Declaration> forwardOption = decls.stream().filter(d -> d instanceof ForwardDeclaration).findFirst();
target/corewyvernIL/expression/New.java:        hasForward = forwardOption.isPresent();
target/corewyvernIL/expression/New.java:            forwardDeclaration = (ForwardDeclaration) forwardOption.get();
target/corewyvernIL/expression/New.java:            ValueType forwardObjectType = ctx.lookupTypeOf(forwardDeclaration.getFieldName());
target/corewyvernIL/expression/New.java:            StructuralType forwardStructuralType = forwardObjectType.getStructuralType(thisCtx);
target/corewyvernIL/expression/New.java:            for (DeclType declType : forwardStructuralType.getDeclTypes()) {
target/corewyvernIL/expression/New.java:        result = new ObjectValue(ds, selfSite, getType().interpret(ctx), forwardDeclaration, getLocation(), ctx);
target/corewyvernIL/expression/New.java:        return decls.stream().filter(x -> x != forwardDeclaration).collect(Collectors.toList());
target/corewyvernIL/expression/New.java:            freeVars.addAll(forwardDeclaration.getFreeVariables());
target/oir/EmitPythonVisitor.java:            OIRForward forward = decl.getForwards().get(0);
target/oir/EmitPythonVisitor.java:            d = ", forward=" + forward.getField();
target/oir/EmitPythonVisitor.java:                + "def __init__(this" + constructorArgs.toString() + ", env={}, forward=None, thisName=None):";
target/oir/EmitPythonVisitor.java:        members += "\n" + indent + indentIncrement + "this.forward = forward";
target/oir/EmitPythonVisitor.java:            members += "\n" + indent + indentIncrement + "return getattr(self.forward, name)";
target/oir/NameMangleVisitor.java:        ArrayList<OIRForward> forwards = new ArrayList<>();
target/oir/NameMangleVisitor.java:            forwards.add(new OIRForward(del.getType(), mangle(del.getField())));
target/oir/NameMangleVisitor.java:        OIRClassDeclaration classDecl = new OIRClassDeclaration(env, name, selfName, forwards, members, fieldValuePairs, freeVars);
target/oir/declarations/OIRClassDeclaration.java:    private List<OIRForward> forwards;
target/oir/declarations/OIRClassDeclaration.java:    public OIRClassDeclaration(OIREnvironment environment, String name, String selfName, List<OIRForward> forwards,
target/oir/declarations/OIRClassDeclaration.java:        this.forwards = forwards;
target/oir/declarations/OIRClassDeclaration.java:        for (OIRForward forward : forwards) {
target/oir/declarations/OIRClassDeclaration.java:            oirInterface = (OIRInterface) forward.getType();
target/oir/declarations/OIRClassDeclaration.java:                return getFieldPosition(forward.getField());
target/oir/declarations/OIRClassDeclaration.java:        for (OIRForward forward : forwards) {
target/oir/declarations/OIRClassDeclaration.java:            type = (OIRInterface) forward.getType();
target/oir/declarations/OIRClassDeclaration.java:        return forwards;
target/oir/declarations/OIRClassDeclaration.java:    public void setForwards(List<OIRForward> forwards) {
target/oir/declarations/OIRClassDeclaration.java:        this.forwards = forwards;
target/oir/PIC.java:                return OIRProgram.PROGRAM.forwardHashTableBuildPICEntry(objectAddress, classID, classDecl,
target/oir/PIC.java:            return OIRProgram.PROGRAM.forwardHashTableBuildPICEntry(objectAddress, classID, classDecl,
target/oir/OIRProgram.java:    private static ForwardImplementation forwardImplementation = ForwardImplementation.HASH_TABLE_NAIVE;
target/oir/OIRProgram.java:    public static void setForwardImplementation(ForwardImplementation forwardImpl) {
target/oir/OIRProgram.java:        forwardImplementation = forwardImpl;
target/oir/OIRProgram.java:        if (forwardImplementation == ForwardImplementation.HASH_TABLE_NAIVE) {
target/oir/OIRProgram.java:            return forwardHashTableNaive(objectAddress, classID, methodName);
target/oir/OIRProgram.java:        } else if (forwardImplementation == ForwardImplementation.PIC) {
target/oir/OIRProgram.java:    public MethodAddress forwardHashTableBuildPICEntry(long objectAddress,
target/oir/OIRProgram.java:    public MethodAddress forwardHashTableNaive(long objectAddress, int classID, String methodName) {
tools/typedAST/core/declarations/DeclSequence.java:        wyvern.tools.typedAST.core.declarations.ForwardDeclaration forwardDecl = null;
tools/typedAST/core/declarations/DeclSequence.java:                forwardDecl = (wyvern.tools.typedAST.core.declarations.ForwardDeclaration) d;
tools/typedAST/core/declarations/DeclSequence.java:        if (forwardDecl != null) {
tools/typedAST/core/declarations/DeclSequence.java:            StructuralType forwardStructuralType = forwardDecl.getType().getILType(ctxTemp).getStructuralType(ctxTemp);
tools/typedAST/core/declarations/DeclSequence.java:            for (DeclType declType : forwardStructuralType.getDeclTypes()) {
tools/errors/ErrorMessage.java:    FORWARD_MUST_BE_VARIABLE("Expected variable in forward declaration, got %ARG", 1),
tools/parsing/coreparser/WyvernASTBuilder.java:    public TypedAST forwardDecl(Type type, TypedAST exp, FileLocation loc) {
tools/parsing/coreparser/WyvernParser.jj:| < FORWARD: "forward" >
tools/parsing/coreparser/WyvernParser.jj:	return build.forwardDecl(type, exp, loc(t));
tools/parsing/coreparser/WyvernParser.java:{if ("" != null) return build.forwardDecl(type, exp, loc(t));}
tools/parsing/coreparser/WyvernParserConstants.java:    "\"forward\"",
tools/parsing/coreparser/ASTBuilder.java:    AST forwardDecl(Type type, AST exp, FileLocation loc);
tools/lexing/WyvernLexer.x:	// inserted forward keyword
tools/lexing/WyvernLexer.x:	terminal Token forwardKwd_t::= /forward/ in (keywds) {: RESULT = token(FORWARD,lexeme); :};
tools/lexing/WyvernLexer.x:	       | forwardKwd_t:t {: RESULT = t; :}
tools/lexing/WyvernLexer.java:        forwardKwd_t(36),
