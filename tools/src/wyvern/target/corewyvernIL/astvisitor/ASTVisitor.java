package wyvern.target.corewyvernIL.astvisitor;

import wyvern.target.corewyvernIL.Case;
import wyvern.target.corewyvernIL.FormalArg;
import wyvern.target.corewyvernIL.expression.Try;
import wyvern.target.corewyvernIL.decl.DefDeclaration;
import wyvern.target.corewyvernIL.decl.ForwardDeclaration;
import wyvern.target.corewyvernIL.decl.EffectDeclaration;
import wyvern.target.corewyvernIL.decl.ModuleDeclaration;
import wyvern.target.corewyvernIL.decl.TypeDeclaration;
import wyvern.target.corewyvernIL.decl.ValDeclaration;
import wyvern.target.corewyvernIL.decl.VarDeclaration;
import wyvern.target.corewyvernIL.decltype.AbstractTypeMember;
import wyvern.target.corewyvernIL.decltype.ConcreteTypeMember;
import wyvern.target.corewyvernIL.decltype.DefDeclType;
import wyvern.target.corewyvernIL.decltype.EffectDeclType;
import wyvern.target.corewyvernIL.decltype.ValDeclType;
import wyvern.target.corewyvernIL.decltype.VarDeclType;
import wyvern.target.corewyvernIL.expression.Bind;
import wyvern.target.corewyvernIL.expression.BooleanLiteral;
import wyvern.target.corewyvernIL.expression.Cast;
import wyvern.target.corewyvernIL.expression.CharacterLiteral;
import wyvern.target.corewyvernIL.expression.FieldGet;
import wyvern.target.corewyvernIL.expression.FieldSet;
import wyvern.target.corewyvernIL.expression.FloatLiteral;
import wyvern.target.corewyvernIL.expression.IntegerLiteral;
import wyvern.target.corewyvernIL.expression.Let;
import wyvern.target.corewyvernIL.expression.Match;
import wyvern.target.corewyvernIL.expression.MethodCall;
import wyvern.target.corewyvernIL.expression.New;
import wyvern.target.corewyvernIL.expression.RationalLiteral;
import wyvern.target.corewyvernIL.expression.SeqExpr;
import wyvern.target.corewyvernIL.expression.StringLiteral;
import wyvern.target.corewyvernIL.expression.Variable;
import wyvern.target.corewyvernIL.support.BreakException;
import wyvern.target.corewyvernIL.type.DataType;
import wyvern.target.corewyvernIL.type.ExtensibleTagType;
import wyvern.target.corewyvernIL.type.NominalType;
import wyvern.target.corewyvernIL.type.RefinementType;
import wyvern.target.corewyvernIL.type.StructuralType;
import wyvern.target.corewyvernIL.type.ValueType;
import wyvern.tools.interop.FFI;
import wyvern.tools.interop.FFIImport;

public abstract class ASTVisitor<S, T> {
    public abstract T visit(S state, New newExpr) throws BreakException;
    public abstract T visit(S state, Case c) throws BreakException;
    public abstract T visit(S state, MethodCall methodCall) throws BreakException;
    public abstract T visit(S state, Match match) throws BreakException;
    public abstract T visit(S state, FieldGet fieldGet) throws BreakException;
    public abstract T visit(S state, Let let) throws BreakException;
    public abstract T visit(S state, Bind bind) throws BreakException;
    public abstract T visit(S state, FieldSet fieldSet) throws BreakException;
    public abstract T visit(S state, Variable variable);
    public abstract T visit(S state, Cast cast) throws BreakException;
    public abstract T visit(S state, VarDeclaration varDecl) throws BreakException;
    public abstract T visit(S state, DefDeclaration defDecl) throws BreakException;
    public abstract T visit(S state, ValDeclaration valDecl) throws BreakException;
    public abstract T visit(S state, ModuleDeclaration moduleDecl) throws BreakException;
    public abstract T visit(S state, IntegerLiteral integerLiteral);
    public abstract T visit(S state, BooleanLiteral booleanLiteral);
    public abstract T visit(S state, RationalLiteral rationalLiteral);
    public abstract T visit(S state, FormalArg formalArg);
    public abstract T visit(S state, VarDeclType varDeclType) throws BreakException;
    public abstract T visit(S state, ValDeclType valDeclType) throws BreakException;
    //public abstract T visit(S state, DependentType dependentType);
    public abstract T visit(S state, DefDeclType defDeclType) throws BreakException;
    public abstract T visit(S state, AbstractTypeMember abstractDeclType);
    public abstract T visit(S state, NominalType nominalType) throws BreakException;
    public abstract T visit(S state, StructuralType structuralType) throws BreakException;
    public abstract T visit(S state, RefinementType type) throws BreakException;
    public abstract T visit(S state, StringLiteral stringLiteral);
    public abstract T visit(S state, CharacterLiteral characterLiteral);
    public abstract T visit(S state, ForwardDeclaration forwardDecl);
    public abstract T visit(S state, ConcreteTypeMember concreteTypeMember) throws BreakException;
    public abstract T visit(S state, TypeDeclaration typeDecl) throws BreakException;
    public abstract T visit(S state, ValueType valueType);
    public abstract T visit(S state, ExtensibleTagType extensibleTagType);
    public abstract T visit(S state, DataType dataType);
    public abstract T visit(S state, FFIImport ffiImport);
    public abstract T visit(S state, FFI ffi);
    public abstract T visit(S state, EffectDeclaration effectDeclaration);
    public abstract T visit(S state, EffectDeclType effectDeclType);
    public abstract T visit(S state, SeqExpr seqExpr) throws BreakException;
    public abstract T visit(S state, FloatLiteral flt);
    public abstract T visit(S state, Try tryStatement);
}
