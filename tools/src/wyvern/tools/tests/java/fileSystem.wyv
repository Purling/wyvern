
module def fileSystem(java:Java) : {} java.FileSystem
import java:wyvern.stdlib.support.FileIO.file

/* Import Types */
import java.File
import java.Reader
import java.Writer
import java.RandomAccessFile

import wyvern.option
type Option = option.Option



def makeFile(path: String) : {system.ffiEffect} File = new
    val f : Unit = file.createNewFile(path)
    effect write = {system.ffiEffect}
    effect read = {system.ffiEffect}
    effect open = {system.ffiEffect}
    effect close = {system.ffiEffect}


    def makeReader(f : File) : {this.open} Reader
        val br = file.openBRForRead(this.f)
        new
            def read() : {f.read} Int
                file.readCharFromFile(br)
            def readLine() : {f.read} Option[String]
                val line = file.readLineFromFile(br)
                if (file.isNull(line))
                    option.None[String]()
                  else
                    option.Some[String](line)
            def readFully() : {f.read} String
                file.readFullyFile(br)
            def close() : {f.close} Unit
                file.closeReader(br)
            
    def makeWriter(f : File) : {this.open}  Writer
        val bw = file.openBWForWrite(this.f)
        new
            def write(s : String) : {f.write}  Unit
                file.writeString(bw, s)        //again temporary limits on write format
            def close() : {f.close} Unit
                file.closeWriter(bw)
            
    
    /* For now this seems a little messy, considering the typical default
     * is to have a FileWriter append to a file, not overwrite...
     * Consider how to design this better
     * Name method openForAppend or openForWrite? Since they're just returning Writer
     */
    def makeAppender(f : File) : {this.open} Writer
        val bw = file.openBWForAppend(this.f)
        new
            def write(s : String) : {f.write} Unit
                file.writeString(bw, s)        //again temporary limits on write format
            def close() : {f.close} Unit
                file.closeWriter(bw)
            
    
    
    /* May want to rename this to something more unique
     * Modify "mode" parameter? and available methods?
     */
    def makeRandomAccessFile(mode : String, f : File) : {this.open} RandomAccessFile
        val rf = file.makeRandomAccessFile(this.f, mode)
        new
            def close() : {f.close} Unit
                file.closeRandomAccessFile(rf)
            def getPosition() : {f.read} Int
                file.accessFilePointer(rf)
            def seek(pos : Int) : {f.read} Unit
                file.seekFilePointer(rf, pos)
            def length() : {f.read} Int
                file.getRandomAccessFileLength(rf)
            def readLine() : {f.read} String
                file.readLineRandomAccess(rf)
            def readUTF() : {f.read} String
                file.readUTFRandomAccess(rf)
            def write(s : String) : {f.write} Unit
                file.writeStringRandomAccess(rf, s)            //temporary write method
            def writeUTF(s : String) : {f.write} Unit
                file.writeUTFRandomAccess(rf, s)
