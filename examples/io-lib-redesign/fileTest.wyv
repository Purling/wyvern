require java
import fileSystem
import stdout
import wyvern.option
type Option = option.Option
val filesys = fileSystem(java)
val out = stdout(java)

val f = filesys.makeFile("example.txt")	     //should this create the file in itself? or only make existing?

val w = f.makeWriter()                       //automatically creates file
w.write("Hello World!")


w.close()

val ap = f.makeAppender()

ap.write("\nfoo")

ap.close()

val r = f.makeReader()

//out.print(r.readFully())
out.print(r.readLine().getOrElse(() => ""))
out.println()
out.print(r.readLine().getOrElse(() => ""))
out.println()

r.close()

val fe = filesys.makeFile("empty.txt")
out.print("/** READ FULLY TEST **/")
out.println()
val re = fe.makeReader()
out.print("made reader")
out.println()
out.print(re.readFully())
out.println()
re.close()


/* Random Access File */

/* options: "r" read only, "rw" read/write, "rws" content & metadata written synchronously,
 * "rwd" content written synchronously
 */
val raf = f.makeRandomAccessFile("rw")

out.printInt(raf.getPosition())
out.println()

//raf.seek(5)
//raf.seek(1)
raf.write("what")
out.print(raf.readLine())
raf.write("help")
raf.seek(0)
out.print(raf.readLine())
out.println()


raf.close()

/* Binary Reader */

out.print("/** BINARY READER TESTS **/")
out.println()

val binreader = f.makeBinaryReader()

out.printInt(binreader.readBytes(12))

binreader.close()

/* Binary Writer */

val binwriter = fe.makeBinaryWriter()

//binwriter.write(33)
binwriter.writeBytes(9761,2)

binwriter.close()

out.println()


val fb = filesys.makeFile("binary.txt")

val bw = fb.makeBinaryWriter()

bw.write(179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216)

val br = fb.makeBinaryReader()

out.printInt(br.read())

out.println()

br.close()
bw.close()


