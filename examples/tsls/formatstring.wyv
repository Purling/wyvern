module formatstring

import wyvern.ast
import wyvern.option
import wyvern.util.matching.regex
import metadata wyvern.collections.list

type AST = ast.AST

type ParsedExpr
    def expr():option.Option[AST]
    def rest():String

def makeParsedExpr(e:option.Option[AST],r:String):ParsedExpr = new
    def expr():option.Option[AST] = e
    def rest():String = r

val prefixRegex : regex.Regex = regex("[^%]+")

// recursively determines position of the rbrace ending the expression, -1 if not found
// TODO: could also be part of a string
def getExprPos(input : String, lbraceCt : Int, pos : Int) : Int
    (input.length() == pos).ifTrue(
        () => -1,
        () => (input.charAt(pos) == #"}").ifTrue(
            () => (lbraceCt == 0).ifTrue(
                () => pos,
                () => getExprPos(input, lbraceCt - 1, pos+1)
            ),
            () => getExprPos(input, lbraceCt, pos+1)
        )
    )
    
def parseExpr(input : String, ctx: system.Context) : ParsedExpr
    //if %{...}, we want to get the contents of the braces
    val normal : option.Option[String] = regex("%\\{").findPrefixMatchOf(input).map[String]((m:regex.Match) => m.after())
    if (normal.isDefined)
        val eoparse = getExprPos(normal.get(), 0, 0)
        (eoparse == -1).ifTrue(
            () => makeParsedExpr(option.None[AST](), normal.get()),
            () => makeParsedExpr(option.Some[AST](ast.parseExpression(normal.get().substring(0,eoparse), ctx)), normal.get().substring(eoparse+1, normal.get().length()))
        )
      else
        //if nothing found then default to whole string
        makeParsedExpr(option.None[AST](), input) //WARNING probably loops
    
    
    //if %/d./d, ensure formatted float
    
    // %/d
    
    // if none of the above, just append % and continue parsing
    //option.Some[AST](ast.string(input))

type FormatString = String
    metadata new
        def parseTSL(input : String, ctx : system.Context) : option.Option[AST]
            val regxMatch : option.Option[regex.Match] = prefixRegex.findPrefixMatchOf(input)
            val prefixString : option.Option[String] = regxMatch.map[String]((m:regex.Match) => m.matched())
            val rest : option.Option[String] = regxMatch.map[String]((m:regex.Match) => m.after())
            if (input == "")
                option.Some[AST](ast.string(""))
              else
                if (prefixString.isDefined)
                    val g = parseExpr(rest.getOrElse(() => ""), ctx)
                    option.Some[AST](ast.call(ast.call(ast.string(prefixString.get()), "+", {g.expr().getOrElse(() => ast.string(""))}), "+", {this.parseTSL(g.rest(), ctx).getOrElse(() => ast.string(""))}))
                  else
                    val g = parseExpr(rest.getOrElse(() => input), ctx)
                    option.Some[AST](ast.call(g.expr().getOrElse(() => ast.string("")), "+", {this.parseTSL(g.rest(), ctx).getOrElse(() => ast.string(""))}))
                
            










    

    
/** OUTLINE

pull off individual string characters until you reach a % (account for esc later)
then look for either a number, ., or { (regexp matching)
continue parsing and appending strings recursively


*/    
    
/*
def parseString(input:String):option.Option[AST]
    //start by pulling the string before the next % character
    val prefixRegex : regex.Regex = regex("[^%]+")
    val prefixString : option.Option[String] = prefixRegex.findPrefixMatchOf(input).map[String](
                                             (m:regex.Match) => m.after())
    val appendString : String = prefixString.getOrElse(() => input)
    //append appendString to the result of parseExpr()


def parseExpr(input:String):option.Option[AST]
    val exp =
    
    ast.cast(exp, ast.types.string())
*/
    
//%\{.*\}
// shouldn't need to account for {} in primitive Wyvern expressions?? but maybe list methods...
// ^maybe account for this later
// still need to account for escape characters